<!DOCTYPE html>
<html>
<head>
  <title>AI Recruiter Dashboard</title>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap" rel="stylesheet">
  <style>
    * { 
      margin: 0; 
      padding: 0; 
      box-sizing: border-box; 
    }
    
    body { 
      font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; 
      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
      min-height: 100vh;
      color: #1a202c;
      line-height: 1.6;
    }
    
    .container {
      max-width: 1200px;
      margin: 0 auto;
      padding: 20px;
    }
    
    .header {
      background: rgba(255, 255, 255, 0.95);
      backdrop-filter: blur(10px);
      padding: 30px;
      border-radius: 20px;
      box-shadow: 0 20px 40px rgba(0,0,0,0.1);
      margin-bottom: 30px;
      text-align: center;
      border: 1px solid rgba(255, 255, 255, 0.2);
    }
    
    .header h1 {
      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
      -webkit-background-clip: text;
      -webkit-text-fill-color: transparent;
      background-clip: text;
      font-size: 3rem;
      font-weight: 700;
      margin-bottom: 15px;
      letter-spacing: -0.02em;
    }
    
    .header p {
      color: #4a5568;
      font-size: 1.1rem;
      font-weight: 400;
      max-width: 600px;
      margin: 0 auto;
    }
    
    .stats {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
      gap: 25px;
      margin-bottom: 40px;
    }
    
    .stat-card {
      background: rgba(255, 255, 255, 0.95);
      backdrop-filter: blur(10px);
      padding: 30px;
      border-radius: 20px;
      box-shadow: 0 20px 40px rgba(0,0,0,0.1);
      text-align: center;
      border: 1px solid rgba(255, 255, 255, 0.2);
      transition: transform 0.3s ease, box-shadow 0.3s ease;
    }
    
    .stat-card:hover {
      transform: translateY(-5px);
      box-shadow: 0 25px 50px rgba(0,0,0,0.15);
    }
    
    .stat-number {
      font-size: 2.5rem;
      font-weight: 700;
      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
      -webkit-background-clip: text;
      -webkit-text-fill-color: transparent;
      background-clip: text;
      margin-bottom: 8px;
    }
    
    .stat-label {
      color: #4a5568;
      font-weight: 500;
      font-size: 1rem;
      text-transform: uppercase;
      letter-spacing: 0.05em;
    }
    
    .tabs {
      display: flex;
      background: rgba(255, 255, 255, 0.95);
      backdrop-filter: blur(10px);
      border-radius: 20px 20px 0 0;
      overflow: hidden;
      box-shadow: 0 20px 40px rgba(0,0,0,0.1);
      border: 1px solid rgba(255, 255, 255, 0.2);
      margin-bottom: 0;
    }
    
    .tab {
      flex: 1;
      padding: 20px;
      text-align: center;
      cursor: pointer;
      transition: all 0.3s ease;
      border: none;
      background: transparent;
      color: #4a5568;
      font-weight: 500;
      font-size: 1rem;
      position: relative;
    }
    
    .tab:hover {
      background: rgba(102, 126, 234, 0.1);
      color: #667eea;
    }
    
    .tab.active {
      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
      color: white;
      font-weight: 600;
    }
    
    .tab-content {
      background: rgba(255, 255, 255, 0.95);
      backdrop-filter: blur(10px);
      padding: 40px;
      border-radius: 0 0 20px 20px;
      box-shadow: 0 20px 40px rgba(0,0,0,0.1);
      margin-bottom: 30px;
      border: 1px solid rgba(255, 255, 255, 0.2);
    }
    
    .tab-content h2 {
      color: #1a202c;
      font-size: 2rem;
      font-weight: 700;
      margin-bottom: 20px;
      letter-spacing: -0.02em;
    }
    
    .form-group {
      margin-bottom: 25px;
    }
    
    .form-group label {
      display: block;
      margin-bottom: 10px;
      font-weight: 600;
      color: #1a202c;
      font-size: 0.95rem;
    }
    
    .form-control {
      width: 100%;
      padding: 15px 20px;
      border: 2px solid #e2e8f0;
      border-radius: 12px;
      font-size: 1rem;
      transition: all 0.3s ease;
      background: white;
      font-family: inherit;
    }
    
    .form-control:focus {
      outline: none;
      border-color: #667eea;
      box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
    }
    
    .btn {
      padding: 15px 30px;
      border: none;
      border-radius: 12px;
      font-size: 1rem;
      cursor: pointer;
      transition: all 0.3s ease;
      font-weight: 600;
      font-family: inherit;
      display: inline-flex;
      align-items: center;
      gap: 8px;
    }
    
    .btn-primary {
      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
      color: white;
      box-shadow: 0 10px 25px rgba(102, 126, 234, 0.3);
    }
    
    .btn-primary:hover {
      transform: translateY(-2px);
      box-shadow: 0 15px 35px rgba(102, 126, 234, 0.4);
    }
    
    .btn-secondary {
      background: #f7fafc;
      color: #4a5568;
      border: 2px solid #e2e8f0;
    }
    
    .btn-secondary:hover {
      background: #edf2f7;
      border-color: #cbd5e0;
      transform: translateY(-1px);
    }
    
    .file-upload {
      border: 3px dashed #667eea;
      border-radius: 20px;
      padding: 50px;
      text-align: center;
      background: linear-gradient(135deg, rgba(102, 126, 234, 0.05) 0%, rgba(118, 75, 162, 0.05) 100%);
      cursor: pointer;
      transition: all 0.3s ease;
      position: relative;
      overflow: hidden;
    }
    
    .file-upload::before {
      content: '';
      position: absolute;
      top: 0;
      left: -100%;
      width: 100%;
      height: 100%;
      background: linear-gradient(90deg, transparent, rgba(255,255,255,0.2), transparent);
      transition: left 0.5s;
    }
    
    .file-upload:hover::before {
      left: 100%;
    }
    
    .file-upload:hover {
      background: linear-gradient(135deg, rgba(102, 126, 234, 0.1) 0%, rgba(118, 75, 162, 0.1) 100%);
      border-color: #5a6fd8;
      transform: translateY(-2px);
    }
    
    .file-upload input {
      display: none;
    }
    
    .upload-icon {
      font-size: 4rem;
      color: #667eea;
      margin-bottom: 20px;
      display: block;
    }
    
    .list-item {
      background: white;
      padding: 25px;
      border-radius: 16px;
      margin-bottom: 20px;
      border-left: 4px solid #667eea;
      box-shadow: 0 10px 25px rgba(0,0,0,0.08);
      transition: transform 0.3s ease, box-shadow 0.3s ease;
    }
    
    .list-item:hover {
      transform: translateY(-2px);
      box-shadow: 0 15px 35px rgba(0,0,0,0.12);
    }
    
    .list-item h4 {
      color: #1a202c;
      margin-bottom: 10px;
      font-weight: 600;
      font-size: 1.1rem;
    }
    
    .list-item p {
      color: #4a5568;
      font-size: 0.95rem;
      line-height: 1.6;
    }
    
    .skills {
      display: flex;
      flex-wrap: wrap;
      gap: 8px;
      margin-top: 15px;
    }
    
    .skill-tag {
      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
      color: white;
      padding: 6px 12px;
      border-radius: 20px;
      font-size: 0.85rem;
      font-weight: 500;
    }

    /* AI Analysis Styles */
    .analysis-controls {
      background: white;
      padding: 30px;
      border-radius: 16px;
      margin-bottom: 30px;
      box-shadow: 0 10px 25px rgba(0,0,0,0.08);
    }

    .analysis-controls .form-group {
      margin-bottom: 20px;
    }

    .analysis-actions {
      display: flex;
      gap: 15px;
      flex-wrap: wrap;
      margin-top: 25px;
    }

    .analysis-results {
      background: white;
      padding: 30px;
      border-radius: 16px;
      margin-top: 20px;
      box-shadow: 0 10px 25px rgba(0,0,0,0.08);
    }

    .score-grid {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
      gap: 20px;
      margin: 25px 0;
    }

    .score-card {
      text-align: center;
      padding: 20px;
      background: linear-gradient(135deg, #f7fafc 0%, #edf2f7 100%);
      border-radius: 12px;
      border: 2px solid #e2e8f0;
    }

    .score-value {
      font-size: 2.5rem;
      font-weight: 700;
      color: #667eea;
      margin-bottom: 8px;
    }

    .score-label {
      font-size: 0.9rem;
      color: #4a5568;
      font-weight: 500;
    }

    .analysis-details h5 {
      color: #1a202c;
      margin: 25px 0 15px 0;
      font-size: 1.1rem;
      font-weight: 600;
    }

    .analysis-details ul {
      margin-left: 20px;
      color: #4a5568;
      line-height: 1.6;
    }

    .analysis-details li {
      margin-bottom: 8px;
    }

    .gap-section h5 {
      color: #1a202c;
      margin: 20px 0 12px 0;
      font-size: 1rem;
      font-weight: 600;
    }

    .gap-section ul {
      margin-left: 20px;
      color: #4a5568;
      line-height: 1.6;
    }

    .questions-list ol {
      margin-left: 20px;
      color: #4a5568;
      line-height: 1.6;
    }

    .questions-list li {
      margin-bottom: 15px;
      padding: 15px;
      background: #f7fafc;
      border-radius: 8px;
      border-left: 3px solid #667eea;
    }

    .fit-score {
      text-align: center;
      margin: 25px 0;
    }

    .fit-details h5 {
      color: #1a202c;
      margin: 20px 0 12px 0;
      font-size: 1rem;
      font-weight: 600;
    }

    .fit-details ul {
      margin-left: 20px;
      color: #4a5568;
      line-height: 1.6;
    }
    
    .hidden {
      display: none;
    }
    
    .loading {
      text-align: center;
      padding: 40px;
      color: #4a5568;
      font-size: 1.1rem;
    }
    
    .success {
      background: linear-gradient(135deg, #48bb78 0%, #38a169 100%);
      color: white;
      padding: 20px;
      border-radius: 12px;
      margin-bottom: 25px;
      box-shadow: 0 10px 25px rgba(72, 187, 120, 0.3);
    }
    
    .error {
      background: linear-gradient(135deg, #f56565 0%, #e53e3e 100%);
      color: white;
      padding: 20px;
      border-radius: 12px;
      margin-bottom: 25px;
      box-shadow: 0 10px 25px rgba(245, 101, 101, 0.3);
    }
    
    .status-draft {
      color: #d69e2e;
      background: #fef5e7;
      padding: 6px 12px;
      border-radius: 20px;
      font-size: 0.8rem;
      font-weight: 600;
    }
    
    .status-sent {
      color: #38a169;
      background: #f0fff4;
      padding: 6px 12px;
      border-radius: 20px;
      font-size: 0.8rem;
      font-weight: 600;
    }
    
    .status-replied {
      color: #3182ce;
      background: #ebf8ff;
      padding: 6px 12px;
      border-radius: 20px;
      font-size: 0.8rem;
      font-weight: 600;
    }
    
    .email-status {
      background: linear-gradient(135deg, #f7fafc 0%, #edf2f7 100%);
      padding: 20px;
      border-radius: 16px;
      margin-bottom: 25px;
      font-size: 0.95rem;
      border: 1px solid #e2e8f0;
    }
    
    .email-status.configured {
      background: linear-gradient(135deg, #f0fff4 0%, #e6fffa 100%);
      border-color: #9ae6b4;
    }
    
    .email-status.not-configured {
      background: linear-gradient(135deg, #fff5f5 0%, #fed7d7 100%);
      border-color: #feb2b2;
    }
    
    /* Modal styles */
    .modal {
      position: fixed;
      z-index: 1000;
      left: 0;
      top: 0;
      width: 100%;
      height: 100%;
      background-color: rgba(0,0,0,0.5);
      backdrop-filter: blur(5px);
    }
    
    .modal-content {
      background: white;
      margin: 5% auto;
      padding: 0;
      border-radius: 20px;
      width: 90%;
      max-width: 600px;
      box-shadow: 0 25px 50px rgba(0, 0, 0, 0.25);
      overflow: hidden;
    }
    
    .modal-header {
      padding: 25px 30px;
      border-bottom: 1px solid #e2e8f0;
      display: flex;
      justify-content: space-between;
      align-items: center;
      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
      color: white;
    }
    
    .modal-header h3 {
      margin: 0;
      font-weight: 600;
      font-size: 1.3rem;
    }
    
    .close {
      color: white;
      font-size: 28px;
      font-weight: bold;
      cursor: pointer;
      opacity: 0.8;
      transition: opacity 0.3s ease;
    }
    
    .close:hover {
      opacity: 1;
    }
    
    .modal-body {
      padding: 30px;
    }
    
    .form-text {
      color: #718096;
      font-size: 0.85rem;
      margin-top: 8px;
      line-height: 1.4;
    }
    
    .form-actions {
      display: flex;
      gap: 15px;
      justify-content: flex-end;
      margin-top: 30px;
    }
    
    /* Responsive design */
    @media (max-width: 768px) {
      .container {
        padding: 15px;
      }
      
      .header h1 {
        font-size: 2rem;
      }
      
      .stats {
        grid-template-columns: 1fr;
        gap: 20px;
      }
      
      .tabs {
        flex-direction: column;
      }
      
      .tab-content {
        padding: 25px;
      }
      
      .file-upload {
        padding: 30px 20px;
      }
      
      .modal-content {
        width: 95%;
        margin: 10% auto;
      }
    }
  </style>
</head>
<body>
  <div class="container">
    <div class="header">
      <h1>🤖 AI Recruiter</h1>
      <p>Automate your recruitment process with AI-powered resume parsing and personalized outreach campaigns</p>
    </div>

    <div class="stats">
      <div class="stat-card">
        <div class="stat-number" id="jobsCount"><%= jobsCount %></div>
        <div class="stat-label">Job Postings</div>
      </div>
      <div class="stat-card">
        <div class="stat-number" id="candidatesCount"><%= candidatesCount %></div>
        <div class="stat-label">Candidates</div>
      </div>
      <div class="stat-card">
        <div class="stat-number" id="campaignsCount"><%= campaignsCount %></div>
        <div class="stat-label">Campaigns</div>
      </div>
      <div class="stat-card">
        <div class="stat-number" id="responseRate">0%</div>
        <div class="stat-label">Response Rate</div>
      </div>
    </div>

    <div class="tabs">
      <button class="tab active" onclick="showTab('upload')">📄 Upload Resumes</button>
      <button class="tab" onclick="showTab('jobs')">💼 Job Postings</button>
      <button class="tab" onclick="showTab('candidates')">👥 Candidates</button>
      <button class="tab" onclick="showTab('campaigns')">📧 Campaigns</button>
      <button class="tab" onclick="showTab('ai-analysis')">🧠 AI Analysis</button>
    </div>

    <!-- Upload Resumes Tab -->
    <div id="upload" class="tab-content">
      <h2>Upload Resumes</h2>
      <p style="color: #4a5568; margin-bottom: 30px;">Upload PDF, DOCX, DOC, or TXT files to automatically extract candidate information using AI</p>
      
      <div class="form-group">
        <label>Single Resume Upload</label>
        <div class="file-upload" onclick="document.getElementById('singleFile').click()">
          <span class="upload-icon">📄</span>
          <p style="font-size: 1.1rem; font-weight: 600; color: #1a202c; margin-bottom: 10px;">Click to upload a single resume</p>
          <p style="font-size: 0.9rem; color: #718096;">Supports: TXT, DOCX, DOC (max 10MB)</p>
        </div>
        <input type="file" id="singleFile" accept=".txt,.docx,.doc" onchange="uploadSingleResume(this)">
      </div>

      <div class="form-group">
        <label>Multiple Resumes Upload</label>
        <div class="file-upload" onclick="document.getElementById('multipleFiles').click()">
          <span class="upload-icon">📁</span>
          <p style="font-size: 1.1rem; font-weight: 600; color: #1a202c; margin-bottom: 10px;">Click to upload multiple resumes</p>
          <p style="font-size: 0.9rem; color: #718096;">Up to 10 files at once</p>
        </div>
        <input type="file" id="multipleFiles" accept=".txt,.docx,.doc" multiple onchange="uploadMultipleResumes(this)">
      </div>

      <div id="uploadResults"></div>
    </div>

    <!-- Job Postings Tab -->
    <div id="jobs" class="tab-content hidden">
      <h2>Job Postings</h2>
      
      <form id="jobForm">
        <div class="form-group">
          <label>Job Title</label>
          <input type="text" class="form-control" id="jobTitle" placeholder="e.g., Senior Software Engineer" required>
        </div>
        
        <div class="form-group">
          <label>Job Description</label>
          <textarea class="form-control" id="jobDescription" rows="8" placeholder="Paste the full job description here..." required></textarea>
        </div>
        
        <button type="submit" class="btn btn-primary">🚀 Create Job Posting</button>
      </form>

      <div id="jobsList" style="margin-top: 40px;"></div>
    </div>

    <!-- Candidates Tab -->
    <div id="candidates" class="tab-content hidden">
      <h2>Candidates</h2>
      <p style="color: #4a5568; margin-bottom: 30px;">View all candidates parsed from uploaded resumes</p>
      <div id="candidatesList"></div>
    </div>

    <!-- Campaigns Tab -->
    <div id="campaigns" class="tab-content hidden">
      <h2>Outreach Campaigns</h2>
      
      <div id="emailStatus" class="email-status">
        <strong>📧 Email Service Status:</strong> <span id="emailStatusText">Checking...</span>
        <div id="emailStatusDetails" style="margin-top: 8px; font-size: 0.9rem;"></div>
        <br>
        <button type="button" class="btn btn-secondary" onclick="toggleEmailConfig()">
          ⚙️ Configure Email Settings
        </button>
      </div>

      <!-- Email Configuration Modal -->
      <div id="emailConfigModal" class="modal hidden">
        <div class="modal-content">
          <div class="modal-header">
            <h3>📧 Configure Email Settings</h3>
            <span class="close" onclick="toggleEmailConfig()">&times;</span>
          </div>
          <div class="modal-body">
            <form id="emailConfigForm">
              <div class="form-group">
                <label>Email Provider</label>
                <select class="form-control" id="emailProvider" onchange="updateEmailConfig()">
                  <option value="">Select Provider</option>
                  <option value="gmail">Gmail</option>
                  <option value="outlook">Outlook/Hotmail</option>
                  <option value="yahoo">Yahoo</option>
                  <option value="custom">Custom SMTP</option>
                </select>
              </div>
              
              <div class="form-group">
                <label>SMTP Host</label>
                <input type="text" class="form-control" id="emailHost" placeholder="smtp.gmail.com" required>
              </div>
              
              <div class="form-group">
                <label>SMTP Port</label>
                <input type="number" class="form-control" id="emailPort" placeholder="587" required>
              </div>
              
              <div class="form-group">
                <label>Email Address</label>
                <input type="email" class="form-control" id="emailUser" placeholder="your-email@gmail.com" required>
              </div>
              
              <div class="form-group">
                <label>Password/App Password</label>
                <input type="password" class="form-control" id="emailPass" placeholder="Your password or app password" required>
                <small class="form-text">For Gmail, use an App Password. For other providers, use your regular password.</small>
              </div>
              
              <div class="form-group">
                <label>
                  <input type="checkbox" id="emailSecure" value="true">
                  Use SSL/TLS (Port 465)
                </label>
                <small class="form-text">Check this for Gmail with App Password, or if your provider requires SSL on port 465.</small>
              </div>
              
              <div class="form-group">
                <label>Connection Type</label>
                <select class="form-control" id="emailConnectionType">
                  <option value="auto">Auto-detect (Recommended)</option>
                  <option value="tls">TLS (Port 587)</option>
                  <option value="ssl">SSL (Port 465)</option>
                  <option value="none">No encryption (Port 25)</option>
                </select>
                <small class="form-text">Most modern providers use TLS on port 587. Gmail with App Password can use SSL on port 465.</small>
              </div>
              
              <div class="form-actions">
                <button type="submit" class="btn btn-primary">💾 Save Configuration</button>
                <button type="button" class="btn btn-secondary" onclick="toggleEmailConfig()">Cancel</button>
              </div>
            </form>
          </div>
        </div>
      </div>
      
      <form id="campaignForm">
        <div class="form-group">
          <label>Select Job</label>
          <select class="form-control" id="campaignJob" required>
            <option value="">Choose a job posting...</option>
          </select>
        </div>
        
        <div class="form-group">
          <label>Select Candidate</label>
          <select class="form-control" id="campaignCandidate" required>
            <option value="">Choose a candidate...</option>
          </select>
        </div>
        
        <button type="submit" class="btn btn-primary">🎯 Generate Outreach</button>
      </form>

      <div style="margin-top: 30px;">
        <button onclick="exportCampaigns()" class="btn btn-secondary">📊 Export Campaigns to CSV</button>
      </div>

      <div id="campaignsList" style="margin-top: 40px;"></div>
    </div>

    <!-- New AI Analysis Tab -->
    <div id="ai-analysis" class="tab-content hidden">
      <div class="section-header">
        <h3>🧠 AI Role Alignment Analysis</h3>
        <p>Intelligent candidate-job matching and analysis</p>
      </div>
      
      <div class="analysis-controls">
        <div class="form-group">
          <label for="analysisCandidate">Select Candidate:</label>
          <select id="analysisCandidate" class="form-control">
            <option value="">Choose a candidate...</option>
          </select>
        </div>
        
        <div class="form-group">
          <label for="analysisJob">Select Job:</label>
          <select id="analysisJob" class="form-control">
            <option value="">Choose a job...</option>
          </select>
        </div>
        
        <div class="analysis-actions">
          <button onclick="analyzeRoleAlignment()" class="btn btn-primary">
            🎯 Analyze Role Alignment
          </button>
          <button onclick="analyzeSkillsGap()" class="btn btn-secondary">
            🔍 Skills Gap Analysis
          </button>
          <button onclick="generateInterviewQuestions()" class="btn btn-secondary">
            ❓ Generate Interview Questions
          </button>
          <button onclick="assessCulturalFit()" class="btn btn-secondary">
            🤝 Cultural Fit Assessment
          </button>
        </div>
      </div>

      <!-- Role Alignment Results -->
      <div id="alignmentResults" class="analysis-results" style="display: none;">
        <h4>🎯 Role Alignment Score</h4>
        <div class="score-grid">
          <div class="score-card">
            <div class="score-value" id="overallScore">-</div>
            <div class="score-label">Overall Match</div>
          </div>
          <div class="score-card">
            <div class="score-value" id="technicalScore">-</div>
            <div class="score-label">Technical Skills</div>
          </div>
          <div class="score-card">
            <div class="score-value" id="experienceScore">-</div>
            <div class="score-label">Experience</div>
          </div>
          <div class="score-card">
            <div class="score-value" id="skillsScore">-</div>
            <div class="score-label">Skills Match</div>
          </div>
          <div class="score-card">
            <div class="score-value" id="culturalFitScore">-</div>
            <div class="score-label">Cultural Fit</div>
          </div>
        </div>
        
        <div class="analysis-details">
          <h5>📊 Detailed Breakdown</h5>
          <p id="detailedBreakdown"></p>
          
          <h5>💡 Recommendations</h5>
          <ul id="recommendationsList"></ul>
          
          <h5>⚠️ Risk Factors</h5>
          <ul id="riskFactorsList"></ul>
          
          <h5>📚 Training Needs</h5>
          <ul id="trainingNeedsList"></ul>
        </div>
      </div>

      <!-- Skills Gap Results -->
      <div id="skillsGapResults" class="analysis-results" style="display: none;">
        <h4>🔍 Skills Gap Analysis</h4>
        <div class="gap-section">
          <h5>❌ Missing Critical Skills</h5>
          <ul id="missingSkillsList"></ul>
          
          <h5>🚨 Critical Gaps</h5>
          <ul id="criticalGapsList"></ul>
          
          <h5>✨ Nice to Have</h5>
          <ul id="niceToHaveList"></ul>
        </div>
      </div>

      <!-- Interview Questions Results -->
      <div id="interviewQuestionsResults" class="analysis-results" style="display: none;">
        <h4>❓ AI-Generated Interview Questions</h4>
        <div class="questions-list">
          <ol id="interviewQuestionsList"></ol>
        </div>
      </div>

      <!-- Cultural Fit Results -->
      <div id="culturalFitResults" class="analysis-results" style="display: none;">
        <h4>🤝 Cultural Fit Assessment</h4>
        <div class="fit-score">
          <div class="score-value" id="culturalFitScoreDisplay">-</div>
          <div class="score-label">Cultural Fit Score</div>
        </div>
        
        <div class="fit-details">
          <h5>💪 Strengths</h5>
          <ul id="strengthsList"></ul>
          
          <h5>⚠️ Concerns</h5>
          <ul id="concernsList"></ul>
          
          <h5>💡 Recommendations</h5>
          <ul id="culturalRecommendationsList"></ul>
        </div>
      </div>
    </div>
  </div>

  <script>
    // Wait for DOM to be fully loaded
    document.addEventListener('DOMContentLoaded', function() {
      console.log('DOM loaded, setting up event listeners...');
      
      // Set up form event listeners
      const jobForm = document.getElementById('jobForm');
      const campaignForm = document.getElementById('campaignForm');
      
      if (jobForm) {
        console.log('Job form found, adding event listener...');
        jobForm.addEventListener('submit', handleJobSubmit);
      } else {
        console.error('Job form not found!');
      }
      
      if (campaignForm) {
        console.log('Campaign form found, adding event listener...');
        campaignForm.addEventListener('submit', handleCampaignSubmit);
      } else {
        console.error('Campaign form not found!');
      }
      
      // Set up email config form handler
      const emailConfigForm = document.getElementById('emailConfigForm');
      if (emailConfigForm) {
        console.log('Email config form found, adding event listener...');
        emailConfigForm.addEventListener('submit', handleEmailConfigSubmit);
      } else {
        console.error('Email config form not found!');
      }
      
      // Initialize stats
      updateStats();
    });

    // Tab switching
    function showTab(tabName) {
      // Hide all tab contents
      document.querySelectorAll('.tab-content').forEach(content => {
        content.classList.add('hidden');
      });
      
      // Remove active class from all tabs
      document.querySelectorAll('.tab').forEach(tab => {
        tab.classList.remove('active');
      });
      
      // Show selected tab content
      document.getElementById(tabName).classList.remove('hidden');
      
      // Add active class to clicked tab
      event.target.classList.add('active');
      
      // Load data for the tab
      if (tabName === 'candidates') loadCandidates();
      if (tabName === 'jobs') loadJobs();
      if (tabName === 'campaigns') loadCampaigns();
      if (tabName === 'ai-analysis') loadCandidatesForAnalysis(); // Load candidates for AI analysis
      if (tabName === 'ai-analysis') loadJobsForAnalysis(); // Load jobs for AI analysis
    }

    // File upload functions
    async function uploadSingleResume(input) {
      if (!input.files[0]) return;
      
      const formData = new FormData();
      formData.append('resume', input.files[0]);
      
      showLoading('uploadResults', 'Parsing resume...');
      
      try {
        const response = await fetch('/api/upload-resume', {
          method: 'POST',
          body: formData
        });
        
        const result = await response.json();
        
        if (response.ok) {
          showSuccess('uploadResults', `Resume parsed successfully! Added candidate: ${result.candidate.name}`);
          updateStats();
        } else {
          const errorMessage = result.error || result.details || 'Failed to parse resume';
          showError('uploadResults', errorMessage);
        }
      } catch (error) {
        showError('uploadResults', 'Network error occurred');
      }
      
      input.value = '';
    }

    async function uploadMultipleResumes(input) {
      if (!input.files.length) return;
      
      const formData = new FormData();
      for (let file of input.files) {
        formData.append('resumes', file);
      }
      
      showLoading('uploadResults', `Parsing ${input.files.length} resumes...`);
      
      try {
        const response = await fetch('/api/upload-multiple-resumes', {
          method: 'POST',
          body: formData
        });
        
        const result = await response.json();
        
        if (response.ok) {
          showSuccess('uploadResults', `${result.candidates.length} resumes parsed successfully!`);
          updateStats();
        } else {
          const errorMessage = result.error || result.details || 'Failed to parse resumes';
          showError('uploadResults', errorMessage);
        }
      } catch (error) {
        showError('uploadResults', 'Network error occurred');
      }
      
      input.value = '';
    }

    // Job management
    async function handleJobSubmit(e) {
      e.preventDefault();
      console.log('Job form submitted!');
      
      const jobData = {
        title: document.getElementById('jobTitle').value,
        description: document.getElementById('jobDescription').value
      };
      
      console.log('Job data:', jobData);
      
      try {
        const response = await fetch('/api/jobs', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify(jobData)
        });
        
        console.log('Response status:', response.status);
        
        if (response.ok) {
          const result = await response.json();
          console.log('Job created successfully:', result);
          document.getElementById('jobForm').reset();
          loadJobs();
          updateStats();
          showSuccess('jobsList', 'Job posting created successfully!');
        } else {
          const error = await response.json();
          console.error('Server error:', error);
          showError('jobsList', error.error || 'Failed to create job posting');
        }
      } catch (error) {
        console.error('Error creating job:', error);
        showError('jobsList', 'Network error occurred');
      }
    }

    // Campaign management
    async function handleCampaignSubmit(e) {
      e.preventDefault();
      console.log('Campaign form submitted!');
      
      const campaignData = {
        jobId: document.getElementById('campaignJob').value,
        candidateId: document.getElementById('campaignCandidate').value
      };
      
      console.log('Campaign data:', campaignData);
      
      try {
        const response = await fetch('/api/campaigns', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify(campaignData)
        });
        
        console.log('Response status:', response.status);
        
        if (response.ok) {
          const result = await response.json();
          console.log('Campaign created successfully:', result);
          document.getElementById('campaignForm').reset();
          loadCampaigns();
          updateStats();
          showSuccess('campaignsList', 'Outreach campaign created successfully!');
        } else {
          const error = await response.json();
          console.error('Server error:', error);
          showError('campaignsList', error.error || 'Failed to create campaign');
        }
      } catch (error) {
        console.error('Error creating campaign:', error);
        showError('campaignsList', 'Network error occurred');
      }
    }

    // Data loading functions
    async function loadCandidates() {
      try {
        const response = await fetch('/api/candidates');
        const candidates = await response.json();
        
        const container = document.getElementById('candidatesList');
        container.innerHTML = candidates.map(candidate => `
          <div class="list-item">
            <h4>${candidate.name}</h4>
            <p><strong>${candidate.title}</strong> • ${candidate.location} • ${candidate.experience}</p>
            <div class="skills">
              ${candidate.skills.map(skill => `<span class="skill-tag">${skill}</span>`).join('')}
            </div>
          </div>
        `).join('');
      } catch (error) {
        console.error('Error loading candidates:', error);
      }
    }

    async function loadJobs() {
      try {
        const response = await fetch('/api/jobs');
        const jobs = await response.json();
        
        const container = document.getElementById('jobsList');
        container.innerHTML = jobs.map(job => `
          <div class="list-item">
            <h4>${job.title}</h4>
            <p>${job.description.substring(0, 200)}...</p>
          </div>
        `).join('');
        
        // Update campaign form dropdown
        const jobSelect = document.getElementById('campaignJob');
        jobSelect.innerHTML = '<option value="">Choose a job posting...</option>' + 
          jobs.map(job => `<option value="${job.id}">${job.title}</option>`).join('');
      } catch (error) {
        console.error('Error loading jobs:', error);
      }
    }

    async function loadCampaigns() {
      try {
        const response = await fetch('/api/campaigns');
        const campaigns = await response.json();
        
        const container = document.getElementById('campaignsList');
        container.innerHTML = campaigns.map(campaign => `
          <div class="list-item">
            <h4>Campaign #${campaign.id}</h4>
            <p><strong>Status:</strong> <span class="status-${campaign.status}">${campaign.status.toUpperCase()}</span></p>
            <p>${campaign.message.substring(0, 200)}...</p>
            <div class="campaign-actions" style="margin-top: 15px;">
              <button onclick="viewCampaign('${campaign.id}')" class="btn btn-secondary" style="margin-right: 10px;">View</button>
              ${campaign.status === 'draft' ? `
                <button onclick="sendCampaignEmail('${campaign.id}')" class="btn btn-primary" style="margin-right: 10px;">📧 Send Email</button>
                <button onclick="copyToClipboard('${campaign.id}')" class="btn btn-secondary">📋 Copy Message</button>
              ` : ''}
              ${campaign.status === 'sent' ? `
                <span style="color: #38a169; font-weight: 600;">✅ Sent on ${new Date(campaign.sentAt).toLocaleDateString()}</span>
              ` : ''}
            </div>
          </div>
        `).join('');
        
        // Update campaign form dropdown
        const candidateSelect = document.getElementById('campaignCandidate');
        const candidatesResponse = await fetch('/api/candidates');
        const candidates = await candidatesResponse.json();
        candidateSelect.innerHTML = '<option value="">Choose a candidate...</option>' + 
          candidates.map(candidate => `<option value="${candidate.id}">${candidate.name} - ${candidate.title}</option>`).join('');
      } catch (error) {
        console.error('Error loading campaigns:', error);
      }
      
      // Check email status when loading campaigns
      checkEmailStatus();
    }

    async function loadCandidatesForAnalysis() {
      try {
        const response = await fetch('/api/candidates');
        const candidates = await response.json();
        
        const select = document.getElementById('analysisCandidate');
        select.innerHTML = '<option value="">Choose a candidate...</option>';
        
        candidates.forEach(candidate => {
          const option = document.createElement('option');
          option.value = candidate.id;
          option.textContent = `${candidate.name} - ${candidate.title}`;
          select.appendChild(option);
        });
      } catch (error) {
        console.error('Error loading candidates for analysis:', error);
      }
    }

    async function loadJobsForAnalysis() {
      try {
        const response = await fetch('/api/jobs');
        const jobs = await response.json();
        
        const select = document.getElementById('analysisJob');
        select.innerHTML = '<option value="">Choose a job...</option>';
        
        jobs.forEach(job => {
          const option = document.createElement('option');
          option.value = job.id;
          option.textContent = job.title;
          select.appendChild(option);
        });
      } catch (error) {
        console.error('Error loading jobs for analysis:', error);
      }
    }

    // Email configuration functions
    function toggleEmailConfig() {
      const modal = document.getElementById('emailConfigModal');
      modal.classList.toggle('hidden');
      
      if (!modal.classList.contains('hidden')) {
        loadCurrentEmailConfig();
      }
    }
    
    function updateEmailConfig() {
      const provider = document.getElementById('emailProvider').value;
      const hostInput = document.getElementById('emailHost');
      const portInput = document.getElementById('emailPort');
      const secureCheckbox = document.getElementById('emailSecure');
      
      // Pre-fill based on provider selection
      switch(provider) {
        case 'gmail':
          hostInput.value = 'smtp.gmail.com';
          portInput.value = '587';
          secureCheckbox.checked = false;
          break;
        case 'outlook':
          hostInput.value = 'smtp-mail.outlook.com';
          portInput.value = '587';
          secureCheckbox.checked = false;
          break;
        case 'yahoo':
          hostInput.value = 'smtp.mail.yahoo.com';
          portInput.value = '587';
          secureCheckbox.checked = false;
          break;
        case 'custom':
          hostInput.value = '';
          portInput.value = '';
          secureCheckbox.checked = false;
          break;
      }
    }
    
    async function loadCurrentEmailConfig() {
      try {
        const response = await fetch('/api/email-config');
        const result = await response.json();
        
        if (result.success && result.config) {
          document.getElementById('emailHost').value = result.config.host;
          document.getElementById('emailPort').value = result.config.port;
          document.getElementById('emailUser').value = result.config.auth.user;
          // Don't pre-fill password for security
          document.getElementById('emailSecure').checked = result.config.secure;
        }
      } catch (error) {
        console.error('Error loading email config:', error);
      }
    }
    
    async function handleEmailConfigSubmit(e) {
      e.preventDefault();
      
      const formData = {
        host: document.getElementById('emailHost').value,
        port: document.getElementById('emailPort').value,
        user: document.getElementById('emailUser').value,
        pass: document.getElementById('emailPass').value,
        secure: document.getElementById('emailSecure').checked.toString(),
        connectionType: document.getElementById('emailConnectionType').value
      };
      
      try {
        const response = await fetch('/api/email-config', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify(formData)
        });
        
        const result = await response.json();
        
        if (result.success) {
          showSuccess('emailStatus', 'Email configuration saved successfully!');
          toggleEmailConfig();
          checkEmailStatus(); // Refresh status
        } else {
          showError('emailStatus', result.error || 'Failed to save email configuration');
        }
      } catch (error) {
        console.error('Error saving email config:', error);
        showError('emailStatus', 'Network error occurred');
      }
    }

    async function updateStats() {
      try {
        const response = await fetch('/api/analytics');
        const stats = await response.json();
        
        document.getElementById('jobsCount').textContent = stats.totalJobs;
        document.getElementById('candidatesCount').textContent = stats.totalCandidates;
        document.getElementById('campaignsCount').textContent = stats.totalCampaigns;
        document.getElementById('responseRate').textContent = stats.responseRate;
      } catch (error) {
        console.error('Error updating stats:', error);
      }
    }

    // Utility functions
    function showLoading(containerId, message) {
      document.getElementById(containerId).innerHTML = `<div class="loading">${message}</div>`;
    }

    function showSuccess(containerId, message) {
      document.getElementById(containerId).innerHTML = `<div class="success">${message}</div>`;
    }

    function showError(containerId, message) {
      document.getElementById(containerId).innerHTML = `<div class="error">${message}</div>`;
    }

    // Campaign sending functions
    async function sendCampaignEmail(campaignId) {
      if (!confirm('Are you sure you want to send this email? This action cannot be undone.')) {
        return;
      }
      
      try {
        const response = await fetch(`/api/campaigns/${campaignId}/send-email`, {
          method: 'POST'
        });
        
        const result = await response.json();
        
        if (result.success) {
          showSuccess('campaignsList', result.message);
          loadCampaigns(); // Refresh the list
          updateStats();
        } else {
          showError('campaignsList', result.error || 'Failed to send email');
        }
      } catch (error) {
        console.error('Error sending campaign email:', error);
        showError('campaignsList', 'Network error occurred');
      }
    }

    async function copyToClipboard(campaignId) {
      try {
        const response = await fetch('/api/campaigns');
        const campaigns = await response.json();
        const campaign = campaigns.find(c => c.id === campaignId);
        
        if (campaign) {
          await navigator.clipboard.writeText(campaign.message);
          showSuccess('campaignsList', 'Message copied to clipboard!');
        }
      } catch (error) {
        console.error('Error copying to clipboard:', error);
        showError('campaignsList', 'Failed to copy message');
      }
    }

    async function viewCampaign(campaignId) {
      try {
        const response = await fetch('/api/campaigns');
        const campaigns = await response.json();
        const campaign = campaigns.find(c => c.id === campaignId);
        
        if (campaign) {
          const candidate = await fetch('/api/candidates').then(r => r.json()).then(candidates => 
            candidates.find(c => c.id === campaign.candidateId)
          );
          const job = await fetch('/api/jobs').then(r => r.json()).then(jobs => 
            jobs.find(j => j.id === campaign.jobId)
          );
          
          const message = `
Campaign Details:
- Candidate: ${candidate?.name || 'Unknown'}
- Job: ${job?.title || 'Unknown'}
- Status: ${campaign.status}
- Created: ${new Date(campaign.createdAt).toLocaleString()}
${campaign.sentAt ? `- Sent: ${new Date(campaign.sentAt).toLocaleString()}` : ''}

Message:
${campaign.message}
          `;
          
          alert(message);
        }
      } catch (error) {
        console.error('Error viewing campaign:', error);
        showError('campaignsList', 'Failed to load campaign details');
      }
    }

    async function exportCampaigns() {
      try {
        const response = await fetch('/api/campaigns/export');
        const blob = await response.blob();
        const url = window.URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;
        a.download = 'outreach-campaigns.csv';
        document.body.appendChild(a);
        a.click();
        window.URL.revokeObjectURL(url);
        document.body.removeChild(a);
        
        showSuccess('campaignsList', 'Campaigns exported successfully!');
      } catch (error) {
        console.error('Error exporting campaigns:', error);
        showError('campaignsList', 'Failed to export campaigns');
      }
    }

    async function checkEmailStatus() {
      try {
        const response = await fetch('/api/email-status');
        const status = await response.json();
        
        const statusElement = document.getElementById('emailStatusText');
        const detailsElement = document.getElementById('emailStatusDetails');
        const statusContainer = document.getElementById('emailStatus');
        
        if (status.configured) {
          statusElement.textContent = '✅ Configured and Ready';
          statusContainer.className = 'email-status configured';
          detailsElement.textContent = 'You can send emails directly from the dashboard.';
        } else {
          statusElement.textContent = '⚠️ Not Configured';
          statusContainer.className = 'email-status not-configured';
          detailsElement.textContent = `Missing environment variables: ${status.missingVars.join(', ')}. Use "Copy Message" to manually send.`;
        }
      } catch (error) {
        console.error('Error checking email status:', error);
        const statusElement = document.getElementById('emailStatusText');
        statusElement.textContent = '❌ Error checking status';
      }
    }

    // AI Analysis functions
    async function analyzeRoleAlignment() {
      const candidateId = document.getElementById('analysisCandidate').value;
      const jobId = document.getElementById('analysisJob').value;

      if (!candidateId || !jobId) {
        showError('alignmentResults', 'Please select both a Candidate and a Job to analyze.');
        return;
      }

      showLoading('alignmentResults', 'Analyzing role alignment...');
      try {
        const response = await fetch('/api/role-alignment', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({ candidateId, jobId })
        });
        const result = await response.json();

        if (response.ok && result.success) {
          console.log('Role alignment result:', result); // Debug log
          
          // Debug: Check if DOM elements exist
          const overallScoreEl = document.getElementById('overallScore');
          const technicalScoreEl = document.getElementById('technicalScore');
          const experienceScoreEl = document.getElementById('experienceScore');
          const skillsScoreEl = document.getElementById('skillsScore');
          const culturalFitScoreEl = document.getElementById('culturalFitScore');
          
          console.log('DOM elements found:', {
            overallScore: overallScoreEl,
            technicalScore: technicalScoreEl,
            experienceScore: experienceScoreEl,
            skillsScore: skillsScoreEl,
            culturalFitScore: culturalFitScoreEl
          });
          
          // Update score displays
          if (overallScoreEl) overallScoreEl.textContent = `${result.alignment.overallScore}%`;
          if (technicalScoreEl) technicalScoreEl.textContent = `${result.alignment.technicalScore}%`;
          if (experienceScoreEl) experienceScoreEl.textContent = `${result.alignment.experienceScore}%`;
          if (skillsScoreEl) skillsScoreEl.textContent = `${result.alignment.skillsScore}%`;
          if (culturalFitScoreEl) culturalFitScoreEl.textContent = `${result.alignment.culturalFitScore}%`;
          
          // Update detailed breakdown
          const detailedBreakdownEl = document.getElementById('detailedBreakdown');
          if (detailedBreakdownEl) detailedBreakdownEl.textContent = result.alignment.detailedBreakdown;
          
          // Update lists
          const recommendationsListEl = document.getElementById('recommendationsList');
          const riskFactorsListEl = document.getElementById('riskFactorsList');
          const trainingNeedsListEl = document.getElementById('trainingNeedsList');
          
          if (recommendationsListEl) recommendationsListEl.innerHTML = result.alignment.recommendations.map(r => `<li>${r}</li>`).join('');
          if (riskFactorsListEl) riskFactorsListEl.innerHTML = result.alignment.riskFactors.map(r => `<li>${r}</li>`).join('');
          if (trainingNeedsListEl) trainingNeedsListEl.innerHTML = result.alignment.trainingNeeds.map(t => `<li>${t}</li>`).join('');
          
          // Show results
          document.getElementById('alignmentResults').style.display = 'block';
          document.getElementById('skillsGapResults').style.display = 'none';
          document.getElementById('interviewQuestionsResults').style.display = 'none';
          document.getElementById('culturalFitResults').style.display = 'none';
          
          console.log('Scores updated:', {
            overall: result.alignment.overallScore,
            technical: result.alignment.technicalScore,
            experience: result.alignment.experienceScore,
            skills: result.alignment.skillsScore,
            cultural: result.alignment.culturalFitScore
          });
        } else {
          showError('alignmentResults', result.error || 'Failed to analyze role alignment');
        }
      } catch (error) {
        console.error('Error analyzing role alignment:', error);
        showError('alignmentResults', 'Network error occurred');
      }
    }

    async function analyzeSkillsGap() {
      const candidateId = document.getElementById('analysisCandidate').value;
      const jobId = document.getElementById('analysisJob').value;

      if (!candidateId || !jobId) {
        showError('skillsGapResults', 'Please select both a Candidate and a Job to analyze.');
        return;
      }

      showLoading('skillsGapResults', 'Analyzing skills gap...');
      try {
        const response = await fetch('/api/skills-gap', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({ candidateId, jobId })
        });
        const result = await response.json();

        if (response.ok && result.success) {
          console.log('Skills gap result:', result); // Debug log
          
          // Update lists
          document.getElementById('missingSkillsList').innerHTML = result.skillsGap.missingSkills.map(s => `<li>${s}</li>`).join('');
          document.getElementById('criticalGapsList').innerHTML = result.skillsGap.criticalGaps.map(g => `<li>${g}</li>`).join('');
          document.getElementById('niceToHaveList').innerHTML = result.skillsGap.niceToHave.map(s => `<li>${s}</li>`).join('');
          
          // Show results
          document.getElementById('skillsGapResults').style.display = 'block';
          document.getElementById('alignmentResults').style.display = 'none';
          document.getElementById('interviewQuestionsResults').style.display = 'none';
          document.getElementById('culturalFitResults').style.display = 'none';
        } else {
          showError('skillsGapResults', result.error || 'Failed to analyze skills gap');
        }
      } catch (error) {
        console.error('Error analyzing skills gap:', error);
        showError('skillsGapResults', 'Network error occurred');
      }
    }

    async function generateInterviewQuestions() {
      const candidateId = document.getElementById('analysisCandidate').value;
      const jobId = document.getElementById('analysisJob').value;

      if (!candidateId || !jobId) {
        showError('interviewQuestionsResults', 'Please select both a Candidate and a Job to generate questions.');
        return;
      }

      showLoading('interviewQuestionsResults', 'Generating interview questions...');
      try {
        const response = await fetch('/api/interview-questions', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({ candidateId, jobId })
        });
        const result = await response.json();

        if (response.ok && result.success) {
          console.log('Interview questions result:', result); // Debug log
          
          // Update questions list
          document.getElementById('interviewQuestionsList').innerHTML = result.questions.map(q => `<li>${q}</li>`).join('');
          
          // Show results
          document.getElementById('interviewQuestionsResults').style.display = 'block';
          document.getElementById('alignmentResults').style.display = 'none';
          document.getElementById('skillsGapResults').style.display = 'none';
          document.getElementById('culturalFitResults').style.display = 'none';
        } else {
          showError('interviewQuestionsResults', result.error || 'Failed to generate interview questions');
        }
      } catch (error) {
        console.error('Error generating interview questions:', error);
        showError('interviewQuestionsResults', 'Network error occurred');
      }
    }

    async function assessCulturalFit() {
      const candidateId = document.getElementById('analysisCandidate').value;
      const jobId = document.getElementById('analysisJob').value;

      if (!candidateId || !jobId) {
        showError('culturalFitResults', 'Please select both a Candidate and a Job to assess cultural fit.');
        return;
      }

      showLoading('culturalFitResults', 'Assessing cultural fit...');
      try {
        const response = await fetch('/api/cultural-fit', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({ candidateId, jobId })
        });
        const result = await response.json();

        if (response.ok && result.success) {
          console.log('Cultural fit result:', result); // Debug log
          
          // Update cultural fit score
          document.getElementById('culturalFitScoreDisplay').textContent = `${result.culturalFit.fitScore}%`;
          
          // Update lists
          document.getElementById('strengthsList').innerHTML = result.culturalFit.strengths.map(s => `<li>${s}</li>`).join('');
          document.getElementById('concernsList').innerHTML = result.culturalFit.concerns.map(c => `<li>${c}</li>`).join('');
          document.getElementById('culturalRecommendationsList').innerHTML = result.culturalFit.recommendations.map(r => `<li>${r}</li>`).join('');
          
          // Show results
          document.getElementById('culturalFitResults').style.display = 'block';
          document.getElementById('alignmentResults').style.display = 'none';
          document.getElementById('skillsGapResults').style.display = 'none';
          document.getElementById('interviewQuestionsResults').style.display = 'none';
        } else {
          showError('culturalFitResults', result.error || 'Failed to assess cultural fit');
        }
      } catch (error) {
        console.error('Error assessing cultural fit:', error);
        showError('culturalFitResults', 'Network error occurred');
      }
    }
  </script>
</body>
</html>

