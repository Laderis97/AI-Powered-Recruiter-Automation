name: CI/CD Pipeline - Crew Accommodations Planner

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '18'

jobs:
  # Build and test the application
  build-test:
    name: Build & Test
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run type checking
        run: npx tsc --noEmit
        
      - name: Build project
        run: npm run build
        
      - name: Run tests
        run: npm test
        
      - name: Test demo run
        run: timeout 30s npm run dev || true
        env:
          NODE_ENV: test

  # Deploy Supabase Edge Functions
  deploy-supabase:
    name: Deploy Supabase Functions
    runs-on: ubuntu-latest
    needs: build-test
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Supabase CLI
        uses: supabase/setup-cli@v1
        with:
          version: latest
          
      - name: Deploy ETA Function
        run: |
          supabase functions deploy eta \
            --project-ref ${{ secrets.SUPABASE_PROJECT_REF }} \
            --token ${{ secrets.SUPABASE_ACCESS_TOKEN }}
            
      - name: Deploy Hotel Source Function
        run: |
          supabase functions deploy hotel-source \
            --project-ref ${{ secrets.SUPABASE_PROJECT_REF }} \
            --token ${{ secrets.SUPABASE_ACCESS_TOKEN }}

  # Deploy to Render
  deploy-render:
    name: Deploy to Render
    runs-on: ubuntu-latest
    needs: build-test
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Deploy to Render
        uses: johnbeynon/render-deploy-action@v0.0.8
        with:
          service-id: ${{ secrets.RENDER_SERVICE_ID }}
          api-key: ${{ secrets.RENDER_API_KEY }}
          
  # Database migrations (run after successful deployment)
  migrate-database:
    name: Run Database Migrations
    runs-on: ubuntu-latest
    needs: [deploy-supabase, deploy-render]
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Supabase CLI
        uses: supabase/setup-cli@v1
        
      - name: Run Migrations
        run: |
          supabase db push \
            --project-ref ${{ secrets.SUPABASE_PROJECT_REF }} \
            --token ${{ secrets.SUPABASE_ACCESS_TOKEN }}

  # Health check after deployment
  health-check:
    name: Post-Deployment Health Check
    runs-on: ubuntu-latest
    needs: [deploy-render, migrate-database]
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: Wait for deployment
        run: sleep 30
        
      - name: Check application health
        run: |
          curl -f ${{ secrets.RENDER_APP_URL }}/health || exit 1
          
      - name: Check API endpoints
        run: |
          curl -f ${{ secrets.RENDER_APP_URL }}/api/pairings || exit 1
          curl -f ${{ secrets.RENDER_APP_URL }}/api/constraints || exit 1

  # Notification on success/failure
  notify:
    name: Deployment Notification
    runs-on: ubuntu-latest
    needs: [health-check]
    if: always() && github.ref == 'refs/heads/main'
    
    steps:
      - name: Notify Success
        if: needs.health-check.result == 'success'
        run: |
          echo "‚úÖ Deployment successful!"
          echo "üöÄ Application: ${{ secrets.RENDER_APP_URL }}"
          echo "üìä Database: Supabase migrations applied"
          
      - name: Notify Failure
        if: needs.health-check.result != 'success'
        run: |
          echo "‚ùå Deployment failed!"
          echo "Check the logs above for details"
          exit 1